{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        if (initialState.length === 4 && initialState.every(function(row) {\n            return row.length === 4;\n        })) {\n            this.initialState = initialState;\n            this.restart();\n        } else throw new Error(\"Initial state is not valid!\");\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status === \"playing\") {\n                    var result = this.moveTiles(true, false);\n                    if (this.isStateDifferent(result.state)) this.updateGame(result);\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status === \"playing\") {\n                    var result = this.moveTiles(true, true);\n                    if (this.isStateDifferent(result.state)) this.updateGame(result);\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status === \"playing\") {\n                    var result = this.moveTiles(false, false);\n                    if (this.isStateDifferent(result.state)) this.updateGame(result);\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status === \"playing\") {\n                    var result = this.moveTiles(false, true);\n                    if (this.isStateDifferent(result.state)) this.updateGame(result);\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.restart();\n                this.status = \"playing\";\n                this.putNewNumber();\n                this.putNewNumber();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = this.cloneState(this.initialState);\n                this.score = 0;\n                this.status = \"idle\";\n                this.firstMoveMade = false;\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"cloneState\",\n            value: function cloneState(state) {\n                var newState = [];\n                for(var row = 0; row < state.length; row++)newState.push((0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(state[row]));\n                return newState;\n            }\n        },\n        {\n            key: \"isStateDifferent\",\n            value: function isStateDifferent(newState) {\n                for(var row = 0; row < this.state.length; row++)for(var column = 0; column < this.state[row].length; column++){\n                    if (this.state[row][column] !== newState[row][column]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"updateGame\",\n            value: function updateGame(result) {\n                this.state = result.state;\n                this.score += result.score;\n                this.firstMoveMade = true;\n                this.putNewNumber();\n                if (this.isGameLost()) this.status = \"lose\";\n                else if (this.isGameWon()) this.status = \"win\";\n            }\n        },\n        {\n            key: \"getFirstMoveMade\",\n            value: function getFirstMoveMade() {\n                return this.firstMoveMade;\n            }\n        },\n        {\n            key: \"getAvailableSpace\",\n            value: function getAvailableSpace() {\n                return this.state.reduce(function(space, row, rowIndex) {\n                    row.forEach(function(cell, cellIndex) {\n                        if (cell === 0) space.push({\n                            x: cellIndex,\n                            y: rowIndex\n                        });\n                    });\n                    return space;\n                }, []);\n            }\n        },\n        {\n            key: \"getRandomSpace\",\n            value: function getRandomSpace(space) {\n                return space[Math.floor(Math.random() * space.length)];\n            }\n        },\n        {\n            key: \"getNewNumber\",\n            value: function getNewNumber() {\n                return Math.floor(Math.random() * 10) === 0 ? 4 : 2;\n            }\n        },\n        {\n            key: \"putNewNumber\",\n            value: function putNewNumber() {\n                var availableSpace = this.getAvailableSpace();\n                var randomSpace = this.getRandomSpace(availableSpace);\n                this.state[randomSpace.y][randomSpace.x] = this.getNewNumber();\n            }\n        },\n        {\n            key: \"isGameLost\",\n            value: function isGameLost() {\n                if (this.getAvailableSpace().length === 0) {\n                    if (this.isStateDifferent(this.moveTiles(false, false).state) || this.isStateDifferent(this.moveTiles(true, true).state) || this.isStateDifferent(this.moveTiles(false, true).state) || this.isStateDifferent(this.moveTiles(true, false).state)) return false;\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isGameWon\",\n            value: function isGameWon() {\n                return this.state.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 2048;\n                    });\n                });\n            }\n        },\n        {\n            key: \"getCellCoords\",\n            value: function getCellCoords(horizontal, firstCoord, position) {\n                if (horizontal) return {\n                    row: firstCoord,\n                    column: position\n                };\n                return {\n                    row: position,\n                    column: firstCoord\n                };\n            }\n        },\n        {\n            key: \"moveTiles\",\n            value: function moveTiles(horizontal, forward, addScore) {\n                var state = this.cloneState(this.state);\n                var score = 0;\n                var rowLength = state[0].length;\n                var columnLength = state.length;\n                var firstCoordLength;\n                var secondCoordLength;\n                if (horizontal) {\n                    firstCoordLength = columnLength;\n                    secondCoordLength = rowLength;\n                } else {\n                    firstCoordLength = rowLength;\n                    secondCoordLength = columnLength;\n                }\n                var initialSecondCoord;\n                var startOfStripe;\n                var endOfStirpe;\n                var step;\n                if (forward) {\n                    initialSecondCoord = secondCoordLength - 2;\n                    startOfStripe = -1;\n                    endOfStirpe = secondCoordLength;\n                    step = 1;\n                } else {\n                    initialSecondCoord = 1;\n                    startOfStripe = secondCoordLength;\n                    endOfStirpe = -1;\n                    step = -1;\n                }\n                for(var firstCoord = 0; firstCoord < firstCoordLength; firstCoord++){\n                    var mergedInStripe = Array(secondCoordLength).fill(false);\n                    for(var secondCoord = initialSecondCoord; secondCoord !== startOfStripe; secondCoord -= step){\n                        var merged = false;\n                        var position = secondCoord;\n                        var currentCellCoords = this.getCellCoords(horizontal, firstCoord, position);\n                        var nextCellCoords = this.getCellCoords(horizontal, firstCoord, position + step);\n                        while(position + step !== endOfStirpe && (state[nextCellCoords.row][nextCellCoords.column] === 0 || state[nextCellCoords.row][nextCellCoords.column] === state[currentCellCoords.row][currentCellCoords.column] && !mergedInStripe[position + step] && !merged)){\n                            if (state[nextCellCoords.row][nextCellCoords.column] > 0) {\n                                merged = true;\n                                score += state[nextCellCoords.row][nextCellCoords.column] * 2;\n                            }\n                            state[nextCellCoords.row][nextCellCoords.column] += state[currentCellCoords.row][currentCellCoords.column];\n                            state[currentCellCoords.row][currentCellCoords.column] = 0;\n                            position += step;\n                            currentCellCoords = this.getCellCoords(horizontal, firstCoord, position);\n                            nextCellCoords = this.getCellCoords(horizontal, firstCoord, position + step);\n                        }\n                        if (merged) mergedInStripe[position] = true;\n                    }\n                }\n                return {\n                    state: state,\n                    score: score\n                };\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nfunction $197cd56b15c33885$var$refreshTable(state) {\n    var fieldRows = document.querySelectorAll(\".field-row\");\n    for(var row = 0; row < state.length; row++)for(var column = 0; column < state[row].length; column++){\n        var fieldCell = fieldRows[row].children[column];\n        var stateCell = state[row][column];\n        fieldCell.className = \"field-cell field-cell--\" + stateCell;\n        if (stateCell > 0) fieldCell.innerText = stateCell;\n        else fieldCell.innerText = \"\";\n    }\n}\nfunction $197cd56b15c33885$var$refreshScore(score) {\n    document.querySelector(\".game-score\").innerText = score;\n}\nfunction $197cd56b15c33885$var$refreshButton(firstMoveMade) {\n    if (firstMoveMade) {\n        $197cd56b15c33885$var$button.className = \"button restart\";\n        $197cd56b15c33885$var$button.innerText = \"Restart\";\n    } else {\n        $197cd56b15c33885$var$button.className = \"button start\";\n        $197cd56b15c33885$var$button.innerText = \"Start\";\n    }\n}\nfunction $197cd56b15c33885$var$refreshMessage(gameStatus) {\n    var messages = document.querySelectorAll(\".message\");\n    messages.forEach(function(message) {\n        return message.classList.add(\"hidden\");\n    });\n    switch(gameStatus){\n        case \"idle\":\n            document.querySelector(\".message-start\").classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            document.querySelector(\".message-win\").classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n            break;\n    }\n}\nfunction $197cd56b15c33885$var$refresh() {\n    $197cd56b15c33885$var$refreshTable($197cd56b15c33885$var$game.getState());\n    $197cd56b15c33885$var$refreshScore($197cd56b15c33885$var$game.getScore());\n    $197cd56b15c33885$var$refreshButton($197cd56b15c33885$var$game.getFirstMoveMade());\n    $197cd56b15c33885$var$refreshMessage($197cd56b15c33885$var$game.getStatus());\n}\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    switch($197cd56b15c33885$var$button.innerText){\n        case \"Start\":\n            $197cd56b15c33885$var$game.start();\n            break;\n        case \"Restart\":\n            $197cd56b15c33885$var$game.restart();\n    }\n    $197cd56b15c33885$var$refresh();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            e.preventDefault();\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            e.preventDefault();\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            e.preventDefault();\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            e.preventDefault();\n            $197cd56b15c33885$var$game.moveLeft();\n    }\n    $197cd56b15c33885$var$refresh();\n});\n\n})();\n//# sourceMappingURL=index.c32ae313.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nfunction refreshTable(state) {\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  for (let row = 0; row < state.length; row++) {\n    for (let column = 0; column < state[row].length; column++) {\n      const fieldCell = fieldRows[row].children[column];\n      const stateCell = state[row][column];\n\n      fieldCell.className = 'field-cell field-cell--' + stateCell;\n\n      if (stateCell > 0) {\n        fieldCell.innerText = stateCell;\n      } else {\n        fieldCell.innerText = '';\n      }\n    }\n  }\n}\n\nfunction refreshScore(score) {\n  document.querySelector('.game-score').innerText = score;\n}\n\nfunction refreshButton(firstMoveMade) {\n  if (firstMoveMade) {\n    button.className = 'button restart';\n    button.innerText = 'Restart';\n  } else {\n    button.className = 'button start';\n    button.innerText = 'Start';\n  }\n}\n\nfunction refreshMessage(gameStatus) {\n  const messages = document.querySelectorAll('.message');\n\n  messages.forEach((message) => message.classList.add('hidden'));\n\n  switch (gameStatus) {\n    case 'idle':\n      document.querySelector('.message-start').classList.remove('hidden');\n      break;\n    case 'win':\n      document.querySelector('.message-win').classList.remove('hidden');\n      break;\n    case 'lose':\n      document.querySelector('.message-lose').classList.remove('hidden');\n      break;\n  }\n}\n\nfunction refresh() {\n  refreshTable(game.getState());\n  refreshScore(game.getScore());\n  refreshButton(game.getFirstMoveMade());\n  refreshMessage(game.getStatus());\n}\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  switch (button.innerText) {\n    case 'Start':\n      game.start();\n      break;\n    case 'Restart':\n      game.restart();\n  }\n\n  refresh();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n      e.preventDefault();\n      game.moveUp();\n      break;\n    case 'ArrowRight':\n      e.preventDefault();\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      e.preventDefault();\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      e.preventDefault();\n      game.moveLeft();\n  }\n\n  refresh();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    if (\n      initialState.length === 4 &&\n      initialState.every((row) => row.length === 4)\n    ) {\n      this.initialState = initialState;\n      this.restart();\n    } else {\n      throw new Error('Initial state is not valid!');\n    }\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(true, false);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(true, true);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(false, false);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(false, true);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.restart();\n    this.status = 'playing';\n\n    this.putNewNumber();\n    this.putNewNumber();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.cloneState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n    this.firstMoveMade = false;\n  }\n\n  // Add your own methods here\n  cloneState(state) {\n    const newState = [];\n\n    for (let row = 0; row < state.length; row++) {\n      newState.push([...state[row]]);\n    }\n\n    return newState;\n  }\n\n  isStateDifferent(newState) {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let column = 0; column < this.state[row].length; column++) {\n        if (this.state[row][column] !== newState[row][column]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateGame(result) {\n    this.state = result.state;\n    this.score += result.score;\n    this.firstMoveMade = true;\n    this.putNewNumber();\n\n    if (this.isGameLost()) {\n      this.status = 'lose';\n    } else if (this.isGameWon()) {\n      this.status = 'win';\n    }\n  }\n\n  getFirstMoveMade() {\n    return this.firstMoveMade;\n  }\n\n  getAvailableSpace() {\n    return this.state.reduce((space, row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          space.push({\n            x: cellIndex,\n            y: rowIndex,\n          });\n        }\n      });\n\n      return space;\n    }, []);\n  }\n\n  getRandomSpace(space) {\n    return space[Math.floor(Math.random() * space.length)];\n  }\n\n  getNewNumber() {\n    return Math.floor(Math.random() * 10) === 0 ? 4 : 2;\n  }\n\n  putNewNumber() {\n    const availableSpace = this.getAvailableSpace();\n    const randomSpace = this.getRandomSpace(availableSpace);\n\n    this.state[randomSpace.y][randomSpace.x] = this.getNewNumber();\n  }\n\n  isGameLost() {\n    if (this.getAvailableSpace().length === 0) {\n      if (\n        this.isStateDifferent(this.moveTiles(false, false).state) ||\n        this.isStateDifferent(this.moveTiles(true, true).state) ||\n        this.isStateDifferent(this.moveTiles(false, true).state) ||\n        this.isStateDifferent(this.moveTiles(true, false).state)\n      ) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  isGameWon() {\n    return this.state.some((row) => row.some((cell) => cell === 2048));\n  }\n\n  getCellCoords(horizontal, firstCoord, position) {\n    if (horizontal) {\n      return {\n        row: firstCoord,\n        column: position,\n      };\n    }\n\n    return {\n      row: position,\n      column: firstCoord,\n    };\n  }\n\n  moveTiles(horizontal, forward, addScore) {\n    const state = this.cloneState(this.state);\n    let score = 0;\n\n    const rowLength = state[0].length;\n    const columnLength = state.length;\n    let firstCoordLength;\n    let secondCoordLength;\n\n    if (horizontal) {\n      firstCoordLength = columnLength;\n      secondCoordLength = rowLength;\n    } else {\n      firstCoordLength = rowLength;\n      secondCoordLength = columnLength;\n    }\n\n    let initialSecondCoord;\n    let startOfStripe;\n    let endOfStirpe;\n    let step;\n\n    if (forward) {\n      initialSecondCoord = secondCoordLength - 2;\n      startOfStripe = -1;\n      endOfStirpe = secondCoordLength;\n      step = 1;\n    } else {\n      initialSecondCoord = 1;\n      startOfStripe = secondCoordLength;\n      endOfStirpe = -1;\n      step = -1;\n    }\n\n    for (let firstCoord = 0; firstCoord < firstCoordLength; firstCoord++) {\n      const mergedInStripe = Array(secondCoordLength).fill(false);\n\n      for (\n        let secondCoord = initialSecondCoord;\n        secondCoord !== startOfStripe;\n        secondCoord -= step\n      ) {\n        let merged = false;\n        let position = secondCoord;\n\n        let currentCellCoords = this.getCellCoords(\n          horizontal,\n          firstCoord,\n          position,\n        );\n        let nextCellCoords = this.getCellCoords(\n          horizontal,\n          firstCoord,\n          position + step,\n        );\n\n        while (\n          position + step !== endOfStirpe &&\n          (state[nextCellCoords.row][nextCellCoords.column] === 0 ||\n            (state[nextCellCoords.row][nextCellCoords.column] ===\n              state[currentCellCoords.row][currentCellCoords.column] &&\n              !mergedInStripe[position + step] &&\n              !merged))\n        ) {\n          if (state[nextCellCoords.row][nextCellCoords.column] > 0) {\n            merged = true;\n            score += state[nextCellCoords.row][nextCellCoords.column] * 2;\n          }\n\n          state[nextCellCoords.row][nextCellCoords.column] +=\n            state[currentCellCoords.row][currentCellCoords.column];\n          state[currentCellCoords.row][currentCellCoords.column] = 0;\n          position += step;\n\n          currentCellCoords = this.getCellCoords(\n            horizontal,\n            firstCoord,\n            position,\n          );\n\n          nextCellCoords = this.getCellCoords(\n            horizontal,\n            firstCoord,\n            position + step,\n          );\n        }\n\n        if (merged) {\n          mergedInStripe[position] = true;\n        }\n      }\n    }\n\n    return {\n      state: state,\n      score: score,\n    };\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","every","row","restart","Error","key","value","status","result","moveTiles","isStateDifferent","state","updateGame","score","putNewNumber","cloneState","firstMoveMade","newState","push","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","column","isGameLost","isGameWon","reduce","space","rowIndex","forEach","cell","cellIndex","x","y","Math","floor","random","availableSpace","getAvailableSpace","randomSpace","getRandomSpace","getNewNumber","some","horizontal","firstCoord","position","forward","addScore","firstCoordLength","secondCoordLength","initialSecondCoord","startOfStripe","endOfStirpe","step","rowLength","columnLength","mergedInStripe","fill","secondCoord","merged","currentCellCoords","getCellCoords","nextCellCoords","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$refresh","$197cd56b15c33885$var$refreshTable","fieldRows","document","querySelectorAll","fieldCell","children","stateCell","className","innerText","getState","getScore","querySelector","getFirstMoveMade","$197cd56b15c33885$var$button","$197cd56b15c33885$var$refreshMessage","gameStatus","messages","message","classList","add","remove","getStatus","addEventListener","start","e","preventDefault","moveUp","moveRight","moveDown","moveLeft"],"version":3,"file":"index.c32ae313.js.map"}